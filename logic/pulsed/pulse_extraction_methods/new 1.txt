    def analyze_received_data(self, arr_data, actual_counts):
        print('analyze received data started')
        """ Analyze the actual data obtained from the TTTR mode of the device.

        @param arr_data: numpy uint32 array with length 'actual_counts'.
        @param actual_counts: int, number of read out events from the buffer.

        Write the obtained arr_data to the predefined array data_trace,
        initialized in the configure method.

        The received array contains 32bit words. The bit assignment starts from
        the MSB (most significant bit), which is here displayed as the most
        left bit.

        For T2 (initialized device with mode=2):
        ----------------------------------------

        [ 4 bit for channel-number |28 bit for time-tag] = [32 bit word]

        channel-number: 4 marker, which serve for the different channels.
                            0001 = marker 1
                            0010 = marker 2
                            0011 = marker 3
                            0100 = marker 4

                        The channel code 15 (all bits ones, 1111) marks a
                        special record. Special records can be overflows or
                        external markers. To differentiate this, the lower 4
                        bits of timetag must be checked:
                            - If they are all zero, the record marks an
                              overflow.
                            - If they are >=1 the individual bits are external
                              markers.

                        Overflow period: 210698240

                        the first bit is the overflow bit. It will be set if
                        the time-tag reached 2^28:

                            0000 = overflow

                        Afterwards both overflow marker and time-tag
                        will be reseted. This overflow should be detected and
                        the time axis should be adjusted accordingly.

        time-tag: The resolution is fixed to 4ps. Within the time of
                  4ps*2^28 = 1.073741824 ms
                  another photon event should occur so that the time axis can
                  be computed properly.

        For T3 (initialized device with mode=3):
        ----------------------------------------

        [ 4 bit for channel-number | 12 bit for start-stop-time | 16 bit for sync counter] = [32 bit word]

        channel-number: 4 marker, which serve for the different channels.
                            0001 = marker 1
                            0010 = marker 2
                            0011 = marker 3
                            0100 = marker 4

                        the first bit is the overflow bit. It will be set if
                        the sync-counter reached 65536 events:

                            1000 = overflow

                        Afterwards both, overflow marker and sync-counter
                        will be reseted. This overflow should be detected and
                        the time axis should be adjusted accordingly.

        start-stop-time: time between to consecutive sync pulses. Maximal time
                         between two sync pulses is therefore limited to
                             2^12 * Res
                         where Res is the Resolution
                             Res = {4,8,16,32,54,128,256,512} (in ps)
                         For largest Resolution of 512ps you have 2097.152 ns.
        sync-counter: can hold up to 2^16 = 65536 events. It that number is
                      reached overflow will be set. That means all 4 bits in
                      the channel-number are set to high (i.e. 1).
        """

        time.sleep(0.2)
        # the timing here is important, if we incraese the speed here then we are more real time!!
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
        Myresolution=4
        if (actual_counts):
            self.data_trace_helper20 = np.append(self.data_trace_helper20, arr_data[0:actual_counts - 1])
            print('actual counts')
            print(actual_counts)
            Mydata = np.zeros(actual_counts, dtype=np.int64)
            k = 0
            for entry in arr_data[0:actual_counts - 1]:
                # apply three bitmasks to extract the relavent numbers:
                # overflow = entry >> 28 & (15)
                marker_ch = entry >> 28 & (15)  # including Overflow
                T2time = entry & (268435455)
                self.time_tag = T2time + self.ofltime
                if marker_ch == 0 or marker_ch == 1 or marker_ch == 2 or marker_ch == 3 or marker_ch == 4:
                    if marker_ch == 0:
                        # print(self.timetag0)
                        if self.startflag == 1:
                            self.finishTag = 1  # finish
                            if self.finishtime0:
                                self.finishtime=max(self.finishtime0,self.time_tag*Myresolution-self.timetag0)
                            self.finishtime0=self.time_tag*Myresolution-self.timetag0
                        else:
                            self.startflag = 1  # start #this will make u sure that the first time finishtag=1 is not hapening
                        self.timetag0 = self.time_tag * Myresolution  # syncronization
                    if self.startflag == 1 and marker_ch == 1:
                        # for i in range(round(self._record_length_ns/self._bin_width_ns)):
                        # if (i-1)*self._bin_width_ns<=MytimeTag-self.timetag0<i*self._bin_width_ns:
                        self.MytimeTag = self.time_tag * Myresolution
                        Mydata[k] = self.MytimeTag - self.timetag0
                        #self.data_trace_helper20#=np.append(self.data_trace_helper20,self.MytimeTag - self.timetag0)
                        k = k + 1
                        # print('photon')
                    # print(self.timetag0)
                    # print(MytimeTag)
                    # print(self.data_trace2[k])
                    # print(self.data_trace[i])
                    # print('self.data_trace[i]')
                    # print('timeTag recorded')
                    if self.finishTag == 1:
                        self.finishTag = 0
                        # self.data_trace=self.data_trace2+self.data_trace
                else:
                    if marker_ch == 15:
                        markers = entry & 15
                        if markers == 0:
                            self.ofltime = self.ofltime + self.WRAPAROUND
                            # print('Got Over flow')
                        else:
                            print('Got Marker')
            self.data_trace_helper = self.data_trace_helper + np.histogram(Mydata, self.mybins)[0]
            if self.finishtime:
                print('finishtime')
                print(self.finishtime)
                print(self.timetag0)
                print(round(float(self.finishtime) / (self._bin_width_ns * 1e3)))
                print(self.data_trace)
                self.data_trace = self.data_trace_helper[
                                  0:5 + round(float(self.finishtime) / (self._bin_width_ns * 1e3))]
                #print(self.data_trace)
        else:
            print('No counts received')

##################################################
        if self.count > self._number_of_gates-1:
            self.count = 0
            print('PicoHarp/Analyze/1352')

        if actual_counts == self.TTREADMAX:
            self.log.warning('Overflow!')
        self.testvar= self.testvar+1
        print(actual_counts)
        print(self.testvar)
     #   self.data_trace=np.int64(self.get_data_testfile()) # Hossein added this for test
        if actual_counts==0 and self.meas_run and self.numberofsweeps<4:
            #print('self.meas_run')
            #print(self.meas_run)
        #    self.meas_run=True
           # print('measrun=true')
           # time.sleep(0.2)
            self.numberofsweeps = self.numberofsweeps + 1
            self.start_measure()
        #if self.meas_run and self.numberofsweeps>=3:
          #  self.meas_run=False
        print('analyze received data finished')


